const { Pool } = require('pg');
require('dotenv').config();

// Kh·ªüi t·∫°o pool t·ª´ connection string
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }, // Supabase y√™u c·∫ßu SSL
  max: 5,                 // s·ªë k·∫øt n·ªëi t·ªëi ƒëa trong pool
  idleTimeoutMillis: 30000, // th·ªùi gian gi·ªØ k·∫øt n·ªëi r·∫£nh
  connectionTimeoutMillis: 10000, // timeout khi k·∫øt n·ªëi
});

// B·∫Øt l·ªói pool n·∫øu c√≥
pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
});

// H√†m test connection (c√≥ th·ªÉ g·ªçi ·ªü server.js khi start app)
const testConnection = async () => {
  let client;
  try {
    console.log('üîå Connecting to PostgreSQL...');
    client = await pool.connect();
    console.log('‚úÖ PostgreSQL Database connected successfully');

    // N·∫øu mu·ªën test query th√¨ m·ªü comment
    // const result = await client.query('SELECT NOW()');
    // console.log('DB Time:', result.rows[0]);
  } catch (error) {
    console.error('Database connection failed:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.error('‚ùå Cannot connect to database server');
    } else if (error.code === '28P01') {
      console.error('‚ùå Invalid username/password');
    } else if (error.code === '3D000') {
      console.error('‚ùå Database does not exist');
    } else if (error.code === 'ENOTFOUND') {
      console.error('‚ùå Database host not found');
    }
  } finally {
    if (client) client.release();
  }
};

// Graceful shutdown (ch·ªâ th·ª±c thi khi app th·ª±c s·ª± t·∫Øt)
process.on('SIGINT', async () => {
  console.log('SIGINT received. Closing database pool...');
  await pool.end();
  console.log('Database pool closed. Exiting process.');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('SIGTERM received. Closing database pool...');
  await pool.end();
  console.log('Database pool closed.');
  // Kh√¥ng g·ªçi process.exit ·ªü ƒë√¢y, Render s·∫Ω kill container
});

module.exports = { pool, testConnection };
